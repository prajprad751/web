{"version":3,"sources":["Component/Navbar.js","Component/Textfield.js","Component/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","aboutText","onClick","toggleMode","htmlFor","Textfield","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newtext","toUpperCase","showAlert","toLowerCase","split","join","length","defaultProps","capitalize","word","lower","charAt","slice","Alert","alert","role","msg","App","setmode","setalert","message","setTimeout","document","body","background","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a6a99426.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"/\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">\r\n                Home\r\n              </a>\r\n            </li>\r\n\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"/\">\r\n                {props.aboutText}\r\n              </a>\r\n            </li>\r\n          </ul>\r\n          <div\r\n            className={`form-check form-switch text-${\r\n              props.mode === \"light\" ? \"dark\" : \"light\"\r\n            }`}\r\n          >\r\n            <input\r\n              className=\"form-check-input\"\r\n              onClick={props.toggleMode}\r\n              type=\"checkbox\"\r\n              id=\"flexSwitchCheckDefault\"\r\n            />\r\n            <label\r\n              className=\"form-check-label\"\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              Enable Dark Mode\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string.isRequired,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title: \"TextUtils\",\r\n  aboutText: \"About\",\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function Textfield(props) {\r\n  const handleUpClick = () => {\r\n    //console.log(\"Upper case was clikced\" + text);\r\n    let newtext = text.toUpperCase();\r\n    setText(newtext);\r\n    props.showAlert(\"Converted to Upper case\", \"success\");\r\n  };\r\n\r\n  const handleLoClick = () => {\r\n    //console.log(\"Upper case was clikced\" + text);\r\n    let newtext = text.toLowerCase();\r\n    setText(newtext);\r\n    props.showAlert(\"Converted to Lower case\", \"success\");\r\n  };\r\n\r\n  const Cleartext = () => {\r\n    //console.log(\"Upper case was clikced\" + text);\r\n    //let newtext = text.toLowerCase();\r\n    setText(\"\");\r\n    props.showAlert(\"Text area erased\", \"success\");\r\n  };\r\n\r\n  const handleExtraSpce = () => {\r\n    let newtext = text.split(/[ ]+/);\r\n    setText(newtext.join(\" \"));\r\n    props.showAlert(\"Extra space has been cleared\", \"success\");\r\n  };\r\n\r\n  const handlOnChange = (event) => {\r\n    //console.log(\"On Change\");\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const [text, setText] = useState(\"Enter your text here...\");\r\n  //setText(\"newtext\");\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container\"\r\n        style={{\r\n          color: props.mode === \"light\" ? \"black\" : \"white\",\r\n        }}\r\n      >\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            value={text}\r\n            onChange={handlOnChange}\r\n            style={{\r\n              backgroundColor: props.mode === \"light\" ? \"white\" : \"black\",\r\n              color: props.mode === \"light\" ? \"black\" : \"white\",\r\n            }}\r\n            id=\"myBox\"\r\n            rows=\"8\"\r\n          ></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>\r\n          Convert to uppercase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}>\r\n          conert to Lowercase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={Cleartext}>\r\n          Clear\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpce}>\r\n          Remove extra space\r\n        </button>\r\n        <div\r\n          className=\"container\"\r\n          style={{\r\n            color: props.mode === \"light\" ? \"black\" : \"white\",\r\n          }}\r\n        >\r\n          <h2>Your text summary</h2>\r\n          <p>\r\n            {text.split(\" \").length} words and {text.length} Characters\r\n          </p>\r\n          <p>{0.008 * text.split(\" \").length} Minutes to read</p>\r\n          <h2>Preview</h2>\r\n          <p>\r\n            {text.length > 0\r\n              ? text\r\n              : \"Enter something in above box to preview here...\"}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nconst capitalize = (word) => {\r\n  const lower = word.toLowerCase();\r\n  return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n};\r\n\r\nexport default function Alert(props) {\r\n  return (\r\n    props.alert && (\r\n      <div\r\n        className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n        role=\"alert\"\r\n      >\r\n        <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n      </div>\r\n    )\r\n  );\r\n}\r\n","import \"./App.css\";\nimport Navbar from \"./Component/Navbar\";\nimport Textfield from \"./Component/Textfield\";\nimport Alert from \"./Component/Alert\";\n//import About from \"./Component/About\";\nimport React, { useState } from \"react\";\n\nfunction App() {\n  const [mode, setmode] = useState(\"light\");\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setmode(\"dark\");\n      document.body.style.background = \"#051b31\";\n      showAlert(\"Dark mode has been enabled\", \"success\");\n    } else {\n      setmode(\"light\");\n      document.body.style.background = \"white\";\n      showAlert(\" Light mode has been enabled\", \"success\");\n    }\n  };\n\n  const [alert, setalert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setalert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setalert(null);\n    }, 1500);\n  };\n\n  //const [alert, setalert] = useState(null);\n\n  return (\n    <>\n      {<Navbar mode={mode} toggleMode={toggleMode} />}\n      {<Alert alert={alert} />}\n      {/*<Navbar/>*/}\n      <div className=\"container my-3\">\n        {\n          <Textfield\n            showAlert={showAlert}\n            heading=\"Enter your text here\"\n            mode={mode}\n          />\n        }\n        {/*<Textfield mode={mode} />*/}\n        {/*<About />*/}\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}